This file lists the m-files that use paresto/casadi for parameter
estimation examples and exercises in the text,
"Chemical Reactor Analysis and Design Fundamentals," by
J.B. Rawlings and J.G. Ekerdt, Nob Hill Publishing. 

12 files total

Chapter 9.

* adsone.m:  estimate parameters from a single adsorption isotherm data.
Figure 9.15, page 526, Example 9.3.

* adsall.m:  estimate parameters from multiple adsorption isotherm data.
Figure 9.16, page 527, Example 9.3.

* batch_data_solution.m: batch reactor data, nth order reaction.
Figure 9.38, page 563, Exercise 9.3.
Requires: batch_data.dat

* bvsm.m:  estimate initial condition and two rate constants from
  Kodak's semi-batch reactor data.  
Figures 9.31, 9.32, 9.33, 9.34, pages 551-553, Section 9.3.
Requires: lc.dat, flow.dat

* bvsm_red.m:  Reduce model; estimate initial condition and ratio of
  rate constants from Kodak's semi-batch reactor data.
Figures 9.35, 9.36, 9.37, pages 556-558, Section 9.3.
Requires: lc.dat, flow.dat lcsim.dat

* estdiff.m:  rate constant and order for nth order kinetics from batch data. 
Exercise 9.5,  Solution manual: Figures S:9.13, S:9.14, S:9.15, page 297.
Requires: batch_noise.dat

* fitrtd.m:  Exercise 9.6 and Exercise 8.11, fit residence time
  distribution data. 
Figure 8.41, Exercise 8.11, page 491.
Exercise 9.6, page 565. Solution manual: Figure S:9.16, page 299.
Requires: ch9selecrtd.dat

* hbv_det.m: estimates six rate constants in deterministic hepatitis B virus model.
Figures 9.23, 9.24, 9.26, page 542, Example 9.5.

* hbv_red.m: estimates four rate constants of reduced hepatitis B virus model.
Page 547. Doesn't make a figure, provides the parameter estimates and confidence
intervals.

* react2rev.m: Estimates rate constant, two reaction orders, and two
reactant initial conditions from single and multiple batch reactor experiments.
Figures 9.40, 9.41,  Exercise 9.11, page 567.  Solution manual,  pages 307-308.
Requires: react2rev_data.dat

Appendix
* ABC.m: Estimate two rate constants in series reaction A->B->C with
batch data
Figure A.10, page 658, Example A.5
Requires: ABC_data.dat


* Sfirstorder.m: Sensitivity calculation for rate constant and initial
  condition for first-order batch reactor simulation
Figure A.3, page 650, Example A.2



TO-DO list; 6/1/2019

1. Sfirstorder.m has a fake optimization problem in order to do a
sensitivity calculation.  Add a function pe.sensitivity so that we
don't need to run pe.optimize to get sensitivities.

2. When estimating state initial conditions, must supply upper and
lower bounds for the entire trajectories as well as the IC. The
trajectory bounds should default to +/- Inf so the user doesn't have
to specify these.

Especially look at this code segment in react2rev.m, which  has two
experiments.

for i = 1: nsets
  lbtheta.ca(:,:,i) = [0.5*theta0.ca(:,:,i), -inf(1, nts-1)];
  lbtheta.cb(:,:,i) = [0.5*theta0.cb(:,:,i), -inf(1, nts-1)];
  ubtheta.ca(:,:,i) = [1.5*theta0.ca(:,:,i), inf(1, nts-1)];
  ubtheta.cb(:,:,i) = [1.5*theta0.cb(:,:,i), inf(1, nts-1)];
endfor

That is *not* very friendly for the average user.

3. We have parameters as a struct with parameter names, but
confidence limits as a vector with numbers. Shouldn't mix these two
conventions.

4. Document paresto's arguments and functions so we can read about
functionality not shown in the small set of examples.


UPDATE on TO-DO list; 12/2019

2. JBR modfied paresto.m to take a single argument, the state IC, when
supplying the lower and upper bounds for estimating the state IC;
paresto supplies default values (+/- Inf) for the remaining time points.

The "unfriendly" code above from react2rev.m is now replaced by:

lbtheta.ca = 0.5*theta0.ca;
lbtheta.cb = 0.5*theta0.cb;
ubtheta.ca = 1.5*theta0.ca;
ubtheta.cb = 1.5*theta0.cb;

This issue is closed.

5. A new parameter, print_level, was added to paresto call to control
output.  Not setting print_level (default) or settting it to zero
suppresses all (paresto and ipopt) output. Setting it to any value not
zero enables output from paresto on timing and ipopt on optimization
progress.

6. JBR added a new file, runall.m.  Invoking runall.m in octave after
a change to paresto.m runs all examples listed in the green_book
directory, and prints error messages for any examples that fail. After
running this test, the proposed update to paresto.m should not break
any calculations in the textbook listed above or its solution manual.

3. JBR changed the return arguments in paresto's confidence function to provide
parameter names for the bounding box confidence limits.

This issue is closed.

UPDATE on TO-DO list; 2/2021

7. The algebraic models generate NaNs for some of the sensitivities. Joel is trying to debug this.
Run adsone.m and echo back the est.dx_dtheta and est.dz_dtheta to see this bug.

8. For some reason, *not* using the shooting method gives a warning about
the wrong number of constraints. Here's the output in the adsone.m example.

octave:74> adsone
CasADi - 2021-02-13 09:48:26 WARNING("NLP is overconstrained: There are 69 equality constraints but only 66 variables.") [.../casadi/core/nlpsol.cpp:512]
Estimated parameters
  scalar structure containing the fields:

    sqKs =  0.13027
    cms =  26.166
    cmp =  32.246
Bounding box intervals
  scalar structure containing the fields:

    sqKs =  0.049549
    cms =  1.5306
    cmp =  2.5270


For others, paresto fails outright. Here's react2rev.m without shooting,
octave:1> react2rev

******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit http://projects.coin-or.org/Ipopt
******************************************************************************

error: casadiMEX: .../casadi/core/function_internal.hpp:1229: Evaluation failed
error: called from
    call at line 942 column 30
    paren at line 1766 column 13
    subsref at line 1751 column 31
    optimize at line 633 column 14
    react2rev at line 104 column 11

UPDATE on TO-DO list; 2/27/2021

8. Joel fixed the algebraic problem so that adsone.m does not give overconstrained warning above.
But now it gives Inf/NaN in EIG.  Use these settings to see this error

daemodel.transcription = 'simultaneous';
daemodel.ord = 1;


EXIT: Optimal Solution Found.
      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval
       nlp_f  |   4.00us (  4.00us)   4.33us (  4.33us)         1
       nlp_g  |  13.00us ( 13.00us)  13.36us ( 13.36us)         1
    nlp_grad  |  59.00us ( 59.00us)  59.46us ( 59.46us)         1
  nlp_grad_f  |  21.00us ( 10.50us)  20.88us ( 10.44us)         2
   nlp_jac_g  | 132.00us ( 66.00us) 132.63us ( 66.31us)         2
       total  |   1.03ms (  1.03ms)   1.02ms (  1.02ms)         1
paresto.paresto (t=53.6699 ms): Sensitivity analysis
fwd3_solver  :   t_proc      (avg)   t_wall      (avg)    n_eval
      total  | 759.00us (759.00us) 758.39us (758.39us)         1
paresto.paresto (t=63.7078 ms): Optimization complete
error: EIG: matrix contains Inf or NaN values
error: called from
    confidence at line 756 column 13
    adsone at line 128 column 6


9.  JBR enabled the simulate function to take a struct of parameters in addition
to a vector.  Both may be convenient for the user.

4/11/2021

10. JBR enabled the simulate function to take a struct for x0 and z0, the
initial conditions for the differential and algebraic states. Not sure this is
going to work correclty if also having *sets* of experiments. Check that later.

11. Add the option for the shooting method to use Sundials rather than only its
current collocation scheme.  That enables much larger time steps and error
control while solving the optimization problem.  The data points can be at large
sample times but the solver controls stepsize independently of that.

12. When using *sets* of experiments, allow some parameters to be specific to each
experiment, and others to be common among all the experiments. Currently all
parameters are common to all experiments.

13.  Can we have multiple experiments with different model types for each experiment
(some batch, some steady state, for example), and both common/specific parameters.

14. Pratyush pointed out that constants (scalars, vectors, matrices, structures)
may be passed into the user's DAE functions by anonymous funtions as in standard
octave/matlab.  There is no need to supply special paresto options for passing
constants.

4/2024

15. Titus made changes to DAE solver to return both the state and algebraic variables.
Previously, the DAE solver only returned the state variables,
and the algebraic variables were calculated from the state variables.
This led to also changing the collocation points to include the end point,
i.e. Radau collocation. 

16. For unknown reasons, fix #15 led to initial algebraic variables lagrange multipliers
to be a small nonzero number, rather than zero.
This is fixed by setting sol.lam_x for indices other that thetaind to be zero.

17. Added lines to check if dg/dz is nonsingular, i.e., checks if formulation 
is a high-index DAE. Such as examples/simplerxn_implicit.m

18. Set sol.lam_x(thetaind) to be nonzero. fix bug when parameters or initial conditions did not appear in the objective, 
  confidence intervals for other parameters were affected.

19. JBR tried a different treatment of confidence intervals for small or negative eigenvalues of
    Hessian; now generates Infs when parameters have no effect, but no NaNs, i.e., avoids 0/0.
    